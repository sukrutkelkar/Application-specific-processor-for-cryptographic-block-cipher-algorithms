//====================================================================================
//ECE 586 COMPUTER ARCHITECTURE
//IDEA ALGORITHM ASSEMBLY CODE
//SUKRUT KELKAR
//====================================================================================
ADD    R24,R0,R0
LI     R11,52(R0)//Start location of the data
LI     R23,116(R0)//Storing return address where the encrypted data should be stored 
LI     R10,0(R0)  
ADD    R3,R0,R0

//loading four chunks of data
LW     R20,0(R11)
LW     R21,1(R11)
LW     R1,2(R11)
LW     R2,3(R11)

//loading six keys
LW     R14,R10
LW     R15,1(R10)
LW     R16,2(R10)
LW     R17,3(R10)
LW     R18,4(R10)
LW     R19,5(R10)

//Using first four keys to perform the first stage operation
MULMOD R6,R14,R20
ADDMOD R7,R15,R21
ADDMOD R8,R16,R1
MULMOD R9,R17,R2

//checking if 8.5 rounds are over
ADDI   R22,R0,9
BEQ    R3,R22,45

XOR    R20,R6,R8
XOR    R21,R9,R7

MULMOD R12,R20,R18
ADDMOD R13,R21,R12
MULMOD R20,R19,R13
ADDMOD R21,R20,R12

XOR    R12,R6,R20
XOR    R13,R21,R7
XOR    R4,R8,R20
XOR    R5,R9,R21

ADDI   R3,R3,1

//incrementing by 6 so as to fetch next keys batch
LI     R10,6(R10)

//Providing swapped set of data for next round
ADD    R20,R12,R0
ADD    R21,R4,R0
ADD    R1,R13,R0
ADD    R2,R5,R0

//checking if 8 rounds are over
ADDI   R22,R0,8
BLT    R3,R22,9

//Providing unswapped data for 8.5th round
ADD    R20,R12,R0
ADD    R21,R13,R0
ADD    R1,R4,R0
ADD    R2,R5,R0

//checking for the 8.5 round
ADDI   R22,R0,9
BLT    R3,R22,9

//Final step after 1 IDEA round
ADD    R22,R6,R0
ADD    R3,R7,R0
ADD    R12,R8,R0
ADD    R13,R9,R0

//storing the results of IDEA round
SW     R22,0(R23)
SW     R3,1(R23)
SW     R12,2(R23)
SW     R13,3(R23)

//counter for 8 IDEA rounds
ADDI   R24,R24,1

//Setting register for fetching next set of data for the next IDEA round 
//Setting next store address location by incrementing by 4
ADDI   R23,R23,4
ADDI   R11,R11,4

//Checking if 8 IDEA rounds are performed (because 2 cores)
ADDI   R22,R0,8
BLT    R24,R22,4

//Terminate execution
HALT